#!/usr/bin/env node

/**
 * Update asset references in the main website to use Vercel Blob URLs
 * Run: node scripts/update-website-asset-refs.js
 */

import { dirname, join } from 'path';
import { fileURLToPath } from 'url';
import { readFile, writeFile } from 'fs/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load the asset URL mapping generated by migrate-to-blob.js
const mappingPath = join(__dirname, 'asset-url-mapping.json');

async function loadUrlMapping() {
  try {
    const mappingData = await readFile(mappingPath, 'utf-8');
    return JSON.parse(mappingData);
  } catch (error) {
    console.error('❌ Failed to load URL mapping file:', error.message);
    console.log(
      'Make sure to run migrate-to-blob.js first to generate the mapping file',
    );
    process.exit(1);
  }
}

function updateFileContent(content, urlMapping) {
  let updatedContent = content;
  let replacements = 0;

  // Update all asset references found in the mapping
  for (const [oldUrl, newUrl] of Object.entries(urlMapping)) {
    // Create regex to match the old URL path
    const urlPattern = oldUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const regex = new RegExp(urlPattern, 'g');

    const matches = updatedContent.match(regex);
    if (matches) {
      updatedContent = updatedContent.replace(regex, newUrl);
      replacements += matches.length;
    }
  }

  return { content: updatedContent, replacements };
}

async function updateFile(filePath, urlMapping) {
  try {
    const content = await readFile(filePath, 'utf-8');
    const { content: updatedContent, replacements } = updateFileContent(
      content,
      urlMapping,
    );

    if (replacements === 0) {
      return { updated: false, replacements: 0 };
    }

    console.log(
      `📝 ${filePath.split('/').pop()}: ${replacements} reference(s) updated`,
    );

    await writeFile(filePath, updatedContent, 'utf-8');

    return { updated: true, replacements };
  } catch (error) {
    console.error(`❌ Failed to update ${filePath}:`, error.message);
    return { updated: false, replacements: 0, error: error.message };
  }
}

async function main() {
  console.log(
    '🔄 Updating website asset references to use Vercel Blob URLs...\n',
  );

  // Load URL mapping
  const urlMapping = await loadUrlMapping();
  console.log(`📋 Loaded ${Object.keys(urlMapping).length} URL mappings\n`);

  // Files that need to be updated (found from the search)
  const filesToUpdate = [
    '/Users/jeromeboileux/projects/ocobo/app/components/ClientCarousel.tsx',
    '/Users/jeromeboileux/projects/ocobo/app/components/stories/StoryItem.tsx',
    '/Users/jeromeboileux/projects/ocobo/app/components/stories/StorySpeaker.tsx',
    '/Users/jeromeboileux/projects/ocobo/app/components/stories/StoryMetas.tsx',
    '/Users/jeromeboileux/projects/ocobo/app/components/homepage/Stories.tsx',
    '/Users/jeromeboileux/projects/ocobo/app/components/strategy/Team.tsx',
    '/Users/jeromeboileux/projects/ocobo/app/components/blog/PostMetas.tsx',
  ];

  let totalUpdated = 0;
  let totalReplacements = 0;
  const errors = [];

  console.log('🔍 Updating component files...\n');

  for (const filePath of filesToUpdate) {
    const result = await updateFile(filePath, urlMapping);

    if (result.updated) {
      totalUpdated++;
    }

    totalReplacements += result.replacements;

    if (result.error) {
      errors.push({ file: filePath, error: result.error });
    }
  }

  // Summary
  console.log('\n✅ Website asset reference update completed!');
  console.log(`\n📊 Summary:`);
  console.log(`- Files processed: ${filesToUpdate.length}`);
  console.log(`- Files updated: ${totalUpdated}`);
  console.log(`- Total URL replacements: ${totalReplacements}`);
  console.log(`- Errors: ${errors.length}`);

  if (errors.length > 0) {
    console.log('\n❌ Errors encountered:');
    errors.forEach(({ file, error }) => {
      console.log(`  - ${file}: ${error}`);
    });
  }

  if (totalUpdated > 0) {
    console.log(
      '\n🎉 All website asset references have been updated to use Vercel Blob!',
    );
    console.log('\n📝 Next steps:');
    console.log('1. Test the website locally: pnpm dev');
    console.log('2. Verify all images load correctly');
    console.log('3. Commit changes if everything looks good');
  } else {
    console.log(
      '\n💡 No updates were needed - all references may already be using Blob URLs',
    );
  }
}

main().catch((error) => {
  console.error('❌ Update failed:', error);
  process.exit(1);
});
